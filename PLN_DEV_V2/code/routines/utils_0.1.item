package routines;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class utils {

    /**
     * helloExample: not return value, only print "hello" + message.
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     * {param} string("world") input: The string need to be printed.
     * 
     * {example} helloExemple("world") # hello world !.
     */
    public static void helloExample(String message) {
        if (message == null) {
            message = "World"; //$NON-NLS-1$
        }
        System.out.println("Hello " + message + " !"); //$NON-NLS-1$ //$NON-NLS-2$
    }
    
    public static String get_status_audit(int count_row_source, int count_row_target) {
    	if ( count_row_source == count_row_target ){
    	    return "pass";
    	} else {
    	    return "reject" ;
    	}	

    }
    public static String get_status_code_audit(int count_row_source, int count_row_target) {
    	if ( count_row_source == count_row_target && count_row_source>0 && count_row_target>0 ){
    	    return "01-Data Lengkap";
    	} else if( count_row_source == count_row_target && count_row_source==0 && count_row_target==0  ) {
    	    return "02-Data Kosong pada Sumber dan Target" ;
    	} else if( count_row_source > count_row_target && count_row_target==0  ) {
    	    return "03-Data Kosong pada Target" ;
    	} else if( count_row_source < count_row_target && count_row_source==0 ) {
    	    return "04-Data Kosong pada Sumber" ;
    	} else if( count_row_source > count_row_target && count_row_source>0 && count_row_target>0  ) {
    	    return "05-Data Sumber Lebih Besar Daripada Data Target" ;
    	} else if( count_row_source < count_row_target && count_row_source>0 && count_row_target>0  ) {
    	    return "06-Data Target Lebih Besar Daripada Data Sumber" ;
    	} else return "07-Invalid" ;
    	    
    	}

    }
}
